{"/home/travis/build/npmtest/node-npmtest-twitter/test.js":"/* istanbul instrument in package npmtest_twitter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-twitter/lib.npmtest_twitter.js":"/* istanbul instrument in package npmtest_twitter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_twitter = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_twitter = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-twitter/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-twitter && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_twitter */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_twitter\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught.stack);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_twitter.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_twitter.rollup.js'] =\n            local.assetsDict['/assets.npmtest_twitter.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_twitter.__dirname +\n                    '/lib.npmtest_twitter.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-twitter/twitter/lib/twitter.js":"'use strict';\n\n/**\n * Module dependencies\n */\n\nvar url = require('url');\nvar Streamparser = require('./parser');\nvar request = require('request');\nvar extend = require('deep-extend');\n\n// Package version\nvar VERSION = require('../package.json').version;\n\nfunction Twitter(options) {\n  if (!(this instanceof Twitter)) { return new Twitter(options) }\n\n  this.VERSION = VERSION;\n\n  // Merge the default options with the client submitted options\n  this.options = extend({\n    consumer_key: null,\n    consumer_secret: null,\n    access_token_key: null,\n    access_token_secret: null,\n    bearer_token: null,\n    rest_base: 'https://api.twitter.com/1.1',\n    stream_base: 'https://stream.twitter.com/1.1',\n    user_stream_base: 'https://userstream.twitter.com/1.1',\n    site_stream_base: 'https://sitestream.twitter.com/1.1',\n    media_base: 'https://upload.twitter.com/1.1',\n    request_options: {\n      headers: {\n        Accept: '*/*',\n        Connection: 'close',\n        'User-Agent': 'node-twitter/' + VERSION\n      }\n    }\n  }, options);\n\n  // Default to user authentication\n  var authentication_options = {\n    oauth: {\n      consumer_key: this.options.consumer_key,\n      consumer_secret: this.options.consumer_secret,\n      token: this.options.access_token_key,\n      token_secret: this.options.access_token_secret\n    }\n  };\n\n  // Check to see if we are going to use User Authentication or Application Authetication\n  if (this.options.bearer_token) {\n    authentication_options = {\n      headers: {\n        Authorization: 'Bearer ' + this.options.bearer_token\n      }\n    };\n  }\n\n  // Configure default request options\n  this.request = request.defaults(\n    extend(\n      this.options.request_options,\n      authentication_options\n    )\n  );\n\n  // Check if Promise present\n  this.allow_promise = (typeof Promise === 'function');\n}\n\nTwitter.prototype.__buildEndpoint = function(path, base) {\n  var bases = {\n    'rest': this.options.rest_base,\n    'stream': this.options.stream_base,\n    'user_stream': this.options.user_stream_base,\n    'site_stream': this.options.site_stream_base,\n    'media': this.options.media_base\n  };\n  var endpoint = (bases.hasOwnProperty(base)) ? bases[base] : bases.rest;\n\n  if (url.parse(path).protocol) {\n    endpoint = path;\n  }\n  else {\n    // If the path begins with media or /media\n    if (path.match(/^(\\/)?media/)) {\n      endpoint = bases.media;\n    }\n    endpoint += (path.charAt(0) === '/') ? path : '/' + path;\n  }\n\n  // Remove trailing slash\n  endpoint = endpoint.replace(/\\/$/, '');\n\n  // Add json extension if not provided in call\n  endpoint += (path.split('.').pop() !== 'json') ? '.json' : '';\n\n  return endpoint;\n};\n\nTwitter.prototype.__request = function(method, path, params, callback) {\n  var base = 'rest', promise = false;\n\n  // Set the callback if no params are passed\n  if (typeof params === 'function') {\n    callback = params;\n    params = {};\n  }\n  // Return promise if no callback is passed and promises available\n  else if (callback === undefined && this.allow_promise) {\n    promise = true;\n  }\n\n  // Set API base\n  if (typeof params.base !== 'undefined') {\n    base = params.base;\n    delete params.base;\n  }\n\n  // Build the options to pass to our custom request object\n  var options = {\n    method: method.toLowerCase(),  // Request method - get || post\n    url: this.__buildEndpoint(path, base) // Generate url\n  };\n\n  // Pass url parameters if get\n  if (method === 'get') {\n    options.qs = params;\n  }\n\n  // Pass form data if post\n  if (method === 'post') {\n    var formKey = 'form';\n\n    if (typeof params.media !== 'undefined') {\n      formKey = 'formData';\n    }\n    options[formKey] = params;\n  }\n\n  // Promisified version\n  if (promise) {\n    var _this = this;\n    return new Promise(function(resolve, reject) {\n      _this.request(options, function(error, response, data) {\n        // request error\n        if (error) {\n          return reject(error);\n        }\n\n        // JSON parse error or empty strings\n        try {\n          // An empty string is a valid response\n          if (data === '') {\n            data = {};\n          }\n          else {\n            data = JSON.parse(data);\n          }\n        }\n        catch(parseError) {\n          return reject(new Error('JSON parseError with HTTP Status: ' + response.statusCode + ' ' + response.statusMessage));\n        }\n\n        // response object errors\n        // This should return an error object not an array of errors\n        if (data.errors !== undefined) {\n          return reject(data.errors);\n        }\n\n        // status code errors\n        if(response.statusCode < 200 || response.statusCode > 299) {\n          return reject(new Error('HTTP Error: ' + response.statusCode + ' ' + response.statusMessage));\n        }\n\n        // no errors\n        resolve(data);\n      });\n    });\n  }\n\n  // Callback version\n  this.request(options, function(error, response, data) {\n    // request error\n    if (error) {\n      return callback(error, data, response);\n    }\n\n    // JSON parse error or empty strings\n    try {\n      // An empty string is a valid response\n      if (data === '') {\n        data = {};\n      }\n      else {\n        data = JSON.parse(data);\n      }\n    }\n    catch(parseError) {\n      return callback(\n        new Error('JSON parseError with HTTP Status: ' + response.statusCode + ' ' + response.statusMessage),\n        data,\n        response\n      );\n    }\n\n\n    // response object errors\n    // This should return an error object not an array of errors\n    if (data.errors !== undefined) {\n      return callback(data.errors, data, response);\n    }\n\n    // status code errors\n    if(response.statusCode < 200 || response.statusCode > 299) {\n      return callback(\n        new Error('HTTP Error: ' + response.statusCode + ' ' + response.statusMessage),\n        data,\n        response\n      );\n    }\n    // no errors\n    callback(null, data, response);\n  });\n\n};\n\n/**\n * GET\n */\nTwitter.prototype.get = function(url, params, callback) {\n  return this.__request('get', url, params, callback);\n};\n\n/**\n * POST\n */\nTwitter.prototype.post = function(url, params, callback) {\n  return this.__request('post', url, params, callback);\n};\n\n/**\n * STREAM\n */\nTwitter.prototype.stream = function(method, params, callback) {\n  if (typeof params === 'function') {\n    callback = params;\n    params = {};\n  }\n\n  var base = 'stream';\n\n  if (method === 'user' || method === 'site') {\n    base = method + '_' + base;\n  }\n\n  var url = this.__buildEndpoint(method, base);\n  var request = this.request({url: url, qs: params});\n  var stream = new Streamparser();\n\n  stream.destroy = function() {\n    // FIXME: should we emit end/close on explicit destroy?\n    if ( typeof request.abort === 'function' ) {\n      request.abort(); // node v0.4.0\n    }\n    else {\n      request.socket.destroy();\n    }\n  };\n\n  request.on('response', function(response) {\n    if(response.statusCode !== 200) {\n      stream.emit('error', new Error('Status Code: ' + response.statusCode));\n    }\n    else {\n      stream.emit('response', response);\n    }\n\n    response.on('data', function(chunk) {\n      stream.receive(chunk);\n    });\n\n    response.on('error', function(error) {\n      stream.emit('error', error);\n    });\n\n    response.on('end', function() {\n      stream.emit('end', response);\n    });\n  });\n\n  request.on('error', function(error) {\n    stream.emit('error', error);\n  });\n  request.end();\n\n  if (typeof callback === 'function') {\n    callback(stream);\n  }\n  else {\n    return stream;\n  }\n};\n\n\nmodule.exports = Twitter;\n","/home/travis/build/npmtest/node-npmtest-twitter/twitter/lib/parser.js":"'use strict';\n\n// glorious streaming json parser, built specifically for the twitter streaming api\n// assumptions:\n//   1) ninjas are mammals\n//   2) tweets come in chunks of text, surrounded by {}'s, separated by line breaks\n//   3) only one tweet per chunk\n//\n//   p = new parser.instance()\n//   p.addListener('object', function...)\n//   p.receive(data)\n//   p.receive(data)\n//   ...\n\nvar EventEmitter = require('events').EventEmitter;\n\nvar Parser = module.exports = function Parser() {\n  // Make sure we call our parents constructor\n  EventEmitter.call(this);\n  this.buffer = '';\n  return this;\n};\n\n// The parser emits events!\nParser.prototype = Object.create(EventEmitter.prototype);\n\nParser.END        = '\\r\\n';\nParser.END_LENGTH = 2;\n\nParser.prototype.receive = function receive(buffer) {\n  this.buffer += buffer.toString('utf8');\n  var index, json;\n\n  // We have END?\n  while ((index = this.buffer.indexOf(Parser.END)) > -1) {\n    json = this.buffer.slice(0, index);\n    this.buffer = this.buffer.slice(index + Parser.END_LENGTH);\n    if (json.length > 0) {\n      try {\n        json = JSON.parse(json);\n        // Event message\n        if (json.event !== undefined) {\n          // First emit specific event\n          this.emit(json.event, json);\n          // Now emit catch-all event\n          this.emit('event', json);\n        }\n        // Delete message\n        else if (json.delete !== undefined) {\n          this.emit('delete', json);\n        }\n        // Friends message (beginning of stream)\n        else if (json.friends !== undefined || json.friends_str !== undefined) {\n          this.emit('friends', json);\n        }\n        // Any other message\n        else {\n          this.emit('data', json);\n        }\n      }\n      catch (error) {\n        error.source = json;\n        this.emit('error', error);\n      }\n    }\n    else {\n      // Keep Alive\n      this.emit('ping');\n    }\n  }\n};\n"}